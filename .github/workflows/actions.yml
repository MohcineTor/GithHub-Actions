# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application Flask CI/CD Web 

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allowing manual triggering of the workflow with Python version selection
  workflow_dispatch:
    inputs:
      python-version:
        type: choice
        description: "Select version"
        options:
          - "3.9"
          - "3.10"
          - "3.11"
        required: true
  
permissions:
  contents: read

# Defining environment variables for Docker registry and image details
env:
  REGISTRY_USER: ${{ vars.DOCKER_USERNAME }}
  REGISTRY_PASS: ${{ secrets.DOCKER_PASSWORD }}
  DOCKER_IMAGE_NAME: ${{ vars.DOCKER_IMAGE_NAME}}
  IMAGE_REG: ${{ vars.IMAGE_REG}}

#This will ensure that your workflow only runs on the latest commit for the main branch and will cancel any in-progress workflows running for the same branch or pull request.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}

jobs: 
# Job for testing and building on Ubuntu
  test-and-build-ubuntu:
      runs-on: ubuntu-20.04
      env:
        PYTHON_VERSION: ${{ github.event.inputs.python-version || '3.9' }}
      steps: 
        - name: ðŸŽ¯ Checkout Code 
          uses: actions/checkout@v3

        - name: ðŸŽ¯ Set up python ${{ inputs.python-version }}
          uses: actions/setup-python@v3
          with:
            python-version: ${{ env.PYTHON_VERSION }}

        - name: ðŸŽ¯ Get next version
          uses: reecetech/version-increment@2023.4.1
          id: version
          with:
            scheme: semver
            increment: patch  # Here, we can specify the type of change: major, minor, or patch depending on the level of bug fixed.

        - name: ðŸ“œ Update && Install Make 
          run: sudo apt-get update && sudo apt-get install make
        
        - name: ðŸ§¹ Clean up project
          run: make clean

        - name: ðŸ”¨ Install Dependencies && Activate venv
          run: make venv

        - name: ðŸŽ¯ Run unit tests
          run: make test

        - name: ðŸ”¨ Build container image
          run: |
            docker build . --file build/Dockerfile --tag ${{ env.DOCKER_IMAGE_NAME }}:${{ steps.version.outputs.version }}
        
        - name: ðŸ”Ž Scan the image docker 
          uses: anchore/scan-action@v3
          with:
            image: ${{ env.DOCKER_IMAGE_NAME }}:${{ steps.version.outputs.version }}
            fail-build: false
            severity-cutoff: medium # Optionally specify the minimum vulnerability severity to trigger a failure.Valid choices are "negligible", "low", "medium", "high" and "critical"
            output-format: table
            only-fixed: true

        - name: ðŸ’€ Login to the Registry
          run: echo "${{ env.REGISTRY_PASS }}" | docker login ${{ env.IMAGE_REG }} -u ${{ env.REGISTRY_USER }} --password-stdin

        - name: ðŸ“¤ Push container image to the registry 
          run: |
            docker push ${{ env.DOCKER_IMAGE_NAME }}:${{ steps.version.outputs.version }}

        - name: ðŸš€ Deploy Locally Web App
          run: |
            docker ps -aq | xargs -r docker stop || true
            docker ps -aq | xargs -r docker rm || true
            docker run -d -p 5000:5000 "${{ env.DOCKER_IMAGE_NAME }}:${{ steps.version.outputs.version }}"
            docker ps 
            sleep 10
            curl http://localhost:5000

        # - name: ðŸ”Ž Check IP
        #   run: |
        #     PUBLIC_IP=$(curl -s https://api.ipify.org)
        #     echo "Public IP address: $PUBLIC_IP"


         
