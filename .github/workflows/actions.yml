# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application Flask CI/CD Web 

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  
  workflow_dispatch:
    inputs:
      python-version:
        type: choice
        description: "Select version"
        options:
          - "3.9"
          - "3.10"
          - "3.11"
        required: true
  
permissions:
  contents: read

env:
  REGISTRY_USER: ${{ vars.DOCKER_USERNAME }}
  REGISTRY_PASS: ${{ secrets.DOCKER_PASSWORD }}
  DOCKER_IMAGE_NAME: ${{ vars.DOCKER_IMAGE_NAME}}



#This will ensure that your workflow only runs on the latest commit for the main branch and will cancel any in-progress workflows running for the same branch or pull request.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}

jobs: 
  test-and-build-ubuntu:
      runs-on: ubuntu-20.04
      env:
        PYTHON_VERSION: ${{ github.event.inputs.python-version || '3.9' }}
      steps: 
        - name: Checkout Code 
          uses: actions/checkout@v3

        - name: Sey up python ${{ inputs.python-version }}
          uses: actions/setup-python@v3
          with:
            python-version: ${{ env.PYTHON_VERSION }}

        - name: Get commit message
          id: commit_message
          run: |
            commit_message=$(git log --format=%B -n 1 ${{ github.sha }})
            echo "commit_message=${commit_message}" >> $GITHUB_ENV

        - name: Determine version increment
          id: version_increment
          run: |
            if [[ "${{ steps.commit_message.outputs.commit_message }}" == "feat:"* ]]; then
              echo "increment=minor" >> $GITHUB_ENV
            elif [[ "${{ steps.commit_message.outputs.commit_message }}" == "fix:"* ]]; then
              echo "increment=patch" >> $GITHUB_ENV
            elif [[ "${{ steps.commit_message.outputs.commit_message }}" == "breaking:"* ]]; then
              echo "increment=major" >> $GITHUB_ENV
            else
              echo "increment=patch" >> $GITHUB_ENV
            fi


        - name: Get next version
          uses: reecetech/version-increment@2023.4.1
          id: version
          with:
            scheme: semver
            increment: ${{ steps.version_increment.outputs.increment }}

        - name: Set output variable 
          run: echo "VERSION=${{ steps.version.outputs.version }}" >> $GITHUB_ENV

        - name: Install Make 
          run: sudo apt-get update && sudo apt-get install make
        
        - name: clean up Env Virtual
          run: make clean

        - name: venv up 
          run: make venv

        - name: Run Testes
          run: make test

        - name: Build & push Docker image
          uses: mr-smithers-excellent/docker-build-push@v6
          with:
            image: ${{ env.DOCKER_IMAGE_NAME }} # Specify the image name and version
            tags: $VERSION
            registry: docker.io
            dockerfile: ./build/Dockerfile
            username: ${{ env.REGISTRY_USER }}
            password: ${{ env.REGISTRY_PASS }}

        - name: Deploy to server
          run: |
            echo "${{ env.REGISTRY_PASS }}" | docker login -u "${{ env.REGISTRY_USER }}" --password-stdin
            docker ps -aq | xargs docker stop || true
            docker ps -aq | xargs docker rm || true
            docker run -d -p 5000:5000 "${{ env.DOCKER_IMAGE_NAME }}:$VERSION"
            docker ps 
          
        - name: Scan image
          uses: anchore/scan-action@v3
          with:
            image: "${{ env.DOCKER_IMAGE_NAME }}:$VERSION"
            fail-build: false

        # - name: ðŸ”Ž Check IP
        #   run: |
        #     PUBLIC_IP=$(curl -s https://api.ipify.org)
        #     echo "Public IP address: $PUBLIC_IP"


         
